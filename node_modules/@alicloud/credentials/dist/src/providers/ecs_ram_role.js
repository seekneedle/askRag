"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const credentials_1 = __importDefault(require("../credentials"));
const http_1 = require("./http");
const session_1 = __importDefault(require("./session"));
const time_1 = require("./time");
const defaultMetadataTokenDuration = 21600; // 6 hours
class ECSRAMRoleCredentialsProvider {
    constructor(builder) {
        // for mock
        this.doRequest = http_1.doRequest;
        this.roleName = builder.roleName;
        this.disableIMDSv1 = builder.disableIMDSv1;
    }
    static builder() {
        return new ECSRAMRoleCredentialsProviderBuilder();
    }
    async getCredentials() {
        if (!this.session || this.needUpdateCredential()) {
            const session = await this.getCredentialsInternal();
            const expirationTime = time_1.parseUTC(session.expiration);
            this.session = session;
            this.expirationTimestamp = expirationTime / 1000;
        }
        return credentials_1.default.builder()
            .withAccessKeyId(this.session.accessKeyId)
            .withAccessKeySecret(this.session.accessKeySecret)
            .withSecurityToken(this.session.securityToken)
            .withProviderName(this.getProviderName())
            .build();
    }
    needUpdateCredential() {
        if (!this.expirationTimestamp) {
            return true;
        }
        return this.expirationTimestamp - (Date.now() / 1000) <= 180;
    }
    async getMetadataToken() {
        // PUT http://100.100.100.200/latest/api/token
        const request = http_1.Request.builder()
            .withMethod('PUT')
            .withProtocol('http')
            .withHost('100.100.100.200')
            .withPath('/latest/api/token')
            .withHeaders({
            'x-aliyun-ecs-metadata-token-ttl-seconds': `${defaultMetadataTokenDuration}`
        })
            .build();
        // ConnectTimeout: 5 * time.Second,
        //   ReadTimeout: 5 * time.Second,
        try {
            const response = await this.doRequest(request);
            if (response.statusCode !== 200) {
                throw new Error(`get metadata token failed with ${response.statusCode}`);
            }
            return response.body.toString('utf8');
        }
        catch (error) {
            if (this.disableIMDSv1) {
                throw error;
            }
            return null;
        }
    }
    async getRoleName() {
        const builder = http_1.Request.builder()
            .withMethod('GET')
            .withProtocol('http')
            .withHost('100.100.100.200')
            .withPath('/latest/meta-data/ram/security-credentials/');
        const metadataToken = await this.getMetadataToken();
        if (metadataToken !== null) {
            builder.withHeaders({
                'x-aliyun-ecs-metadata-token': metadataToken
            });
        }
        // ConnectTimeout: 5 * time.Second,
        // ReadTimeout: 5 * time.Second,
        const request = builder.build();
        const response = await this.doRequest(request);
        if (response.statusCode !== 200) {
            throw new Error(`get role name failed: ${request.method} ${request.toRequestURL()} ${response.statusCode}`);
        }
        return response.body.toString().trim();
    }
    async getCredentialsInternal() {
        let roleName = this.roleName;
        if (!roleName) {
            roleName = await this.getRoleName();
        }
        const builder = http_1.Request.builder()
            .withMethod('GET')
            .withProtocol('http')
            .withHost('100.100.100.200')
            .withPath(`/latest/meta-data/ram/security-credentials/${roleName}`);
        // ConnectTimeout: 5 * time.Second,
        //   ReadTimeout: 5 * time.Second,
        //     Headers: map[string]string{ },
        const metadataToken = await this.getMetadataToken();
        if (metadataToken !== null) {
            builder.withHeaders({
                'x-aliyun-ecs-metadata-token': metadataToken
            });
        }
        const request = builder.build();
        const response = await this.doRequest(request);
        if (response.statusCode !== 200) {
            throw new Error(`get sts token failed, httpStatus: ${response.statusCode}, message = ${response.body.toString()}`);
        }
        let data;
        try {
            data = JSON.parse(response.body.toString());
        }
        catch (ex) {
            throw new Error(`get sts token failed, json parse failed: ${ex.message}`);
        }
        if (!data || !data.AccessKeyId || !data.AccessKeySecret || !data.SecurityToken) {
            throw new Error('get sts token failed');
        }
        if (data.Code !== 'Success') {
            throw new Error('refresh Ecs sts token err, Code is not Success');
        }
        return new session_1.default(data.AccessKeyId, data.AccessKeySecret, data.SecurityToken, data.Expiration);
    }
    getProviderName() {
        return 'ecs_ram_role';
    }
}
exports.default = ECSRAMRoleCredentialsProvider;
class ECSRAMRoleCredentialsProviderBuilder {
    constructor() {
        this.disableIMDSv1 = false;
    }
    withRoleName(roleName) {
        this.roleName = roleName;
        return this;
    }
    withDisableIMDSv1(disableIMDSv1) {
        this.disableIMDSv1 = disableIMDSv1;
        return this;
    }
    build() {
        // 设置 roleName 默认值
        if (!this.roleName) {
            this.roleName = process.env.ALIBABA_CLOUD_ECS_METADATA;
        }
        // 允许通过环境变量强制关闭 V1
        if (process.env.ALIBABA_CLOUD_IMDSV1_DISABLED === 'true') {
            this.disableIMDSv1 = true;
        }
        return new ECSRAMRoleCredentialsProvider(this);
    }
}
//# sourceMappingURL=ecs_ram_role.js.map